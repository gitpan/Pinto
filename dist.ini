name             = Pinto
main_module      = lib/Pinto.pm
author           = Jeffrey Ryan Thalhammer <jeff@stratopan.com>
license          = Perl_5
copyright_holder = Imaginative Software Systems
copyright_year   = 2011

version          = 0.067

[GatherDir]         ; everything under top dir
[PruneCruft]        ; default stuff to skip
[ManifestSkip]      ; if -f MANIFEST.SKIP, skip those, too

; file modifications
[OurPkgVersion]     ; add $VERSION = ... to all files
[PodWeaver]         ; generate Pod
 
; generated files
[License]           ; boilerplate license
[ReadmeFromPod]     ; from Pod (runs after PodWeaver)
[ReadmeAnyFromPod / ReadmePodInRoot]
type = markdown
filename = README.md
location = root
 
; t tests
[Test::Compile]     ; make sure .pm files all compile
fake_home = 1       ; fakes $ENV{HOME} just in case

[Test::ReportPrereqs]
include = DBIx::Class
include = DBD::SQLite


; xt tests
[MetaTests]         ; xt/release/meta-yaml.t
[PodSyntaxTests]    ; xt/release/pod-syntax.t
;[PodCoverageTests]  ; xt/release/pod-coverage.t
;[PortabilityTests]  ; xt/release/portability.t (of file name)
[Test::Version]     ; xt/release/test-version.t

;[Test::Perl::Critic] ; xt/author/critic.t
;critic_config = perlcritic.ini 

;[Test::PodSpelling] ; xt/release/pod-spell.t
;spell_cmd = aspell list
;stopwords = VCS
;stopwords = PASSed
;stopwords = ActionBatch
;stopwords = subclasses
;stopwords = noinit
;stopwords = nocleanup
;stopwords = nocommit
;stopwords = norecurse
;stopwords = devel
;stopwords = Reindex
;stopwords = reindex
;stopwords = reindexing
;stopwords = reindexed
;stopwords = reindexer
;stopwords = reindexes
;stopwords = Stratopan

; metadata
[AutoPrereqs]       ; find prereqs from code
[Prereqs]           ; prereqs that aren't findable
DBD::SQLite        = 1.33               ; not use`d directly
DBIx::Class        = 0.08200            ; prefetch is fixed
Archive::Tar       = 0                  ; in case they don't have tar(1)
Package::Locator   = 0.006              ; locates older dists
Pinto::PackageSpec = 0.066              ; is_core and is_perl methods
Pinto::Types       = 0.066              ; Username and RevisionID types
Pinto::Constants   = 0.066              ; LOCK_TYPE constants
Pinto::Util        = 0.066              ; is_blank() utility functions
Dist::Metadata     = 0.924              ; mod_info() with checksums 
JSON::PP           = 2.27103            ; wanted by Parse::CPAN::Meta

; author prereqs (magic comments)
; authordep Pod::Weaver::Plugin::StopWords
; authordep Pod::Weaver::Section::Support

[MinimumPerl]       ; determine minimum perl version
[GitHub::Meta]      ; add Github links
[MetaNoIndex]       ; sets 'no_index' in META
directory = t
directory = xt
directory = examples
directory = corpus
 
[MetaProvides::Package] ; add 'provides' to META files
meta_noindex = 1        ; respect prior no_index directives
 
[MetaYAML]          ; generate META.yml (v1.4)
[MetaJSON]          ; generate META.json (v2)
[TravisYML]         ; generate .travis.yml

; build system
[ExecDir]           ; include 'bin/*' as executables
[ShareDir]          ; include 'share/' for File::ShareDir
[ModuleBuild]       ; create Build.PL

; INSTALL file 
[InstallGuide]      ; must come after making Build.PL and/or Makefile.PL

; manifest (after all generated files)
[Manifest]          ; create MANIFEST
 
; before release
[Git::Check]        ; ensure all files checked in
[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
[CheckChangesHasContent] ; ensure Changes has been updated
; [CheckExtraTests]   ; ensure xt/ tests pass
[TestRelease]       ; ensure t/ tests pass
[ConfirmRelease]    ; prompt before uploading
 
; releaser
[UploadToCPAN]      ; uploads to CPAN
 
; after release
[Git::Commit / Commit_Dirty_Files] ; commit Changes (as released)
 
[Git::Tag]          ; tag repo with custom tag
tag_format = release-%v
 
; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual
 
[NextRelease]
 
[Git::Commit / Commit_Changes] ; commit Changes (for new dev)
 
[Git::Push]         ; push repo to remote
push_to = origin
